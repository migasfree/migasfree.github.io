import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,e as i,b as n,d as s,a as e,i as l}from"./app-32b9815d.js";const u="/img/access.png",r={},d=n("p",null,"Uno de los obstáculos importantes en una migración a un sistema operativo libre es el uso y abuso que hacen los usuarios de Microsoft Access.",-1),k={href:"https://www.winehq.org/",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.zaragoza.es/contenidos/azlinux/migracionescritoriosl.pdf",target:"_blank",rel:"noopener noreferrer"},v=l(`<p><strong>Catalogar</strong> las distintas bases de datos Microsoft Access, que han ido creando los usuarios de nuestra organización, para determinar <strong>quién y desde qué ordenador</strong> accede a un fichero de Microsoft Access, es crucial a la hora de decidir si un ordenador de puesto de trabajo es migrable o no.</p><p>Esta información podríamos obtenerla a través de los logs de nuestro servicio de archivos de red pero, ¿y qué hay de las BBDD locales?</p><p>Una solución simple y efectiva, haciendo uso de migasfree, podría ser:</p><ol><li>Busca: Ejecutar un programa en cada ordenador que periódicamente mire, los archivos abiertos en el sistema y almacene su nombre en un fichero si el nombre del archivo abierto acaba en <code>.mdb</code> o <code>.mde</code>. Pasados unos días tendríamos almacenados localmente en un fichero las rutas de las BBDD a las que accede cada ordenador.</li><li>Captura: Crear una fórmula, de tipo lista, que «recolecte» estas rutas como atributos del ordenador.</li></ol><p>¡Venga, manos a la obra!</p><h2 id="busca" tabindex="-1"><a class="header-anchor" href="#busca" aria-hidden="true">#</a> Busca</h2><p>Programa python a ejecutar en los clientes:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token keyword">import</span> psutil
<span class="token keyword">import</span> time
<span class="token keyword">import</span> json
<span class="token keyword">import</span> os
<span class="token keyword">import</span> platform
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime

_format_time <span class="token operator">=</span> <span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span>
_extensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;.mdb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.mde&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.accdb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.accde&#39;</span><span class="token punctuation">)</span>
_capture_time <span class="token operator">=</span> <span class="token number">300</span>


<span class="token keyword">def</span> <span class="token function">get_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;Windows&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> platform<span class="token punctuation">.</span>uname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;XP&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;c:/windows/temp/access.json&quot;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;c:/users/public/temp/access.json&quot;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;/var/tmp/access.json&quot;</span>


<span class="token keyword">def</span> <span class="token function">read_json</span><span class="token punctuation">(</span>_filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>_filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>_filename<span class="token punctuation">)</span> <span class="token keyword">as</span> json_data<span class="token punctuation">:</span>
            data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">return</span> data


<span class="token keyword">def</span> <span class="token function">save_json</span><span class="token punctuation">(</span>_filename<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    obj <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>_filename<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>
    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
    obj<span class="token punctuation">.</span>close


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    _filename <span class="token operator">=</span> get_filename<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> read_json<span class="token punctuation">(</span>_filename<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        changed <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">for</span> proc <span class="token keyword">in</span> psutil<span class="token punctuation">.</span>process_iter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> f <span class="token keyword">in</span> proc<span class="token punctuation">.</span>open_files<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> f<span class="token punctuation">.</span>path<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>_extensions<span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">if</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;Windows&quot;</span><span class="token punctuation">:</span>
                            archive <span class="token operator">=</span> f<span class="token punctuation">.</span>path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token keyword">else</span><span class="token punctuation">:</span>
                            archive <span class="token operator">=</span> f<span class="token punctuation">.</span>path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;/red/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span> <span class="token keyword">not</span> archive <span class="token keyword">in</span> data<span class="token punctuation">:</span>
                            data<span class="token punctuation">[</span>archive<span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>_format_time<span class="token punctuation">)</span>
                            changed <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">except</span><span class="token punctuation">:</span>
                <span class="token keyword">pass</span>
        <span class="token keyword">if</span> changed<span class="token punctuation">:</span>
            save_json<span class="token punctuation">(</span>_filename<span class="token punctuation">,</span>data<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>_capture_time<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="captura" tabindex="-1"><a class="header-anchor" href="#captura" aria-hidden="true">#</a> Captura</h2><p>Fórmula migasfree de tipo Lista y lenguaje python:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> json

<span class="token keyword">def</span> <span class="token function">get_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;Windows&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> platform<span class="token punctuation">.</span>uname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;XP&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;c:/windows/temp/access.json&quot;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;c:/users/public/temp/access.json&quot;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;/var/tmp/access.json&quot;</span>

<span class="token keyword">def</span> <span class="token function">read_json</span><span class="token punctuation">(</span>_filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>_filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>_filename<span class="token punctuation">)</span> <span class="token keyword">as</span> json_data<span class="token punctuation">:</span>
            data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">return</span> data

_filename <span class="token operator">=</span> get_filename<span class="token punctuation">(</span><span class="token punctuation">)</span>
_ret <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

<span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>_filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> read_json<span class="token punctuation">(</span>_filename<span class="token punctuation">)</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> data<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        _ret <span class="token operator">+=</span> key <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span>

<span class="token keyword">if</span> _ret<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>_ret<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">&quot;none&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ya sólo nos quedaría empaquetar esta solución y desplegarla con migasfree.</p><h2 id="resultado" tabindex="-1"><a class="header-anchor" href="#resultado" aria-hidden="true">#</a> Resultado</h2><p>Una vez capturadas las BBDD como <code>atributos</code> de los ordenadores en el servidor migasfree, ya sólo nos queda analizar la información.</p><ol><li>Conocer que BBDD se utilizan en un ordenador concreto es ahora tan sencillo como acceder al ordenador y mirar sus atributos.</li><li>Obtener la lista de ordenadores que hacen uso de una BD concreta tambien es posible desplegando su atributo.</li><li>Ver todo el catálogo de BBDD, tan simple como ir a los atributos y filtrar por ACCESS.</li></ol><div style="text-align:center;"><figure><img src="`+u+'" alt="Resultado" tabindex="0" loading="lazy"><figcaption>Resultado</figcaption></figure></div>',16);function b(f,y){const a=o("ExternalLinkIcon");return p(),c("div",null,[d,i(" more "),n("blockquote",null,[n("p",null,[n("a",k,[s("WINE"),e(a)]),s(" es la primera opción para su emulación y es intensamente utilizado para que las aplicaciones Microsoft Access sigan funcionando. Como última opción para aquellas aplicaciones que no son emulables con WINE se plantea el uso de máquinas virtuales VMWare ejecutadas localmente.»")]),n("p",null,[s("— Eduardo Romero, "),n("a",m,[s("Migración Escritorio Software Libre"),e(a)])])]),v])}const _=t(r,[["render",b],["__file","2018-03-01-busca-captura-access.html.vue"]]);export{_ as default};
